@model IEnumerable<TickTaskDoe.Models.ToDoTask>

<style>
    #TaskEditDeleteLinks{
        text-align: center;
    }
    #TaskEdit{
        color: #024382 !important;
        font-size: 15px;
        font-weight: bolder;
        background-color: #fff;
        padding: 5px;
        border-radius: 5px;
        margin-right: 5px;
        text-decoration: none;
    }

    #TaskDelete{
        color: darkred !important;
        font-size: 15px;
        font-weight: bolder;
        background-color: #fff;
        padding: 5px;
        border-radius: 5px;
        margin-left: 5px;
        text-decoration: none;
    }

    /*Styling for switch button*/
    input[type=checkbox]{
        display: none;
    }

    .DoneSwitchBtn{
      height: 26px;
      width: 50px;
      background: #ff6a00;
      position: relative;
      border-radius: 20px;
      box-shadow: inset 0 3px 10px rgba(0,0,0,0.3);
    }

    .DoneSwitchBtn:before{
      height: 23px;
      width: 23px;
      position: absolute;
      background: linear-gradient(#e0e0e0,#e6e6e6);
      left: 2px;
      top: 1.5px;
      content: '';
      transition: all 200ms;
      border-radius: 50%;
      box-shadow: 0 8px 6px -4px rgba(0,0,0,0.25);
    }

    input[type=checkbox]:checked + input[type="hidden"] + .DoneSwitchBtn:before{
      left: 25px;
    }

    input[type=checkbox]:checked + input[type="hidden"] + .DoneSwitchBtn {
      background: #028f5e;
    }
</style>

<h3>@ViewBag.ListName Tasks</h3>
@if (ViewBag.percentComplete >= 0)
{
    <div id="progressToDo">
        <br/>
        <div class="progress">
            <div class="progress-bar" role="progressbar"
                style="width:@(Html.AttributeEncode(ViewBag.percentComplete))%">
            </div>
        </div>
            <p>@(ViewBag.percentComplete)% Complete</p>
    </div>
}

<table class="table">
    <tr>
        <!--<th>
            @Html.DisplayNameFor(model => model.Desc)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Done)
        </th>
        <th>Task Description</th>
        <th>Is Done?</th-->
    </tr>


    @foreach (var item in Model)
    {
        <tr>
            <td>
                @if (!item.Done)
                {
                    @Html.DisplayFor(modelItem => item.Desc)
                }
                else
                {
                    <div class="strikeThrough">@Html.DisplayFor(modelItem => item.Desc)</div>
                }
            </td>
            <td>
                @String.Format("{0:MM/dd/yyyy}", item.DueDate)
            </td>
            <td>
                <label class="DoneSwitch">
                    @Html.CheckBoxFor(modelItem => item.Done, new { id = item.Id, @class = "ActiveCheck" })
                    <div class="DoneSwitchBtn"></div>
                </label>
            </td>
            <td id="TaskEditDeleteLinks">
                <a class="glyphicon glyphicon-pencil" id="TaskEdit" title="Edit" onclick=TaskPopupEdit(@item.Id)></a>
                <a class="glyphicon glyphicon-remove" id="TaskDelete" title="Delete" onclick=TaskPopupDelete(@item.Id)></a>
            </td>
        </tr>
    }
</table>

<script src="~/CustomUnits/DoneEventListener.js"></script>